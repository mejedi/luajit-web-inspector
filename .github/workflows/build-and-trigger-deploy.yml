name: Build and Trigger Deploy

on:
  push:
    branches:
      - master
  create:
    tags:
      - 'v*'

env:
  IMAGEID: rapidlua/luajit.me
  PACKERV: 1.5.1

jobs:
  version-stamp:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
    - name: Version stamp
      run: git describe --tags | sed -e s/^v// > version
    - uses: actions/upload-artifact@v1.0.0
      with: { name: version, path: version }

  cloud-images:
    runs-on: ubuntu-latest
    needs: version-stamp
    steps:
    - name: Install packer
      run: >
        curl https://releases.hashicorp.com/packer/${PACKERV}/packer_${PACKERV}_linux_$(dpkg --print-architecture).zip > packer.zip &&
        unzip packer.zip &&
        sudo install packer /usr/bin &&
        rm packer.zip packer
    - uses: actions/checkout@v1
    - uses: actions/download-artifact@v1.0.0
      with: { name: version }
    - name: Build cloud images
      run: packer build -var "version=$(cat version/version)" -var "digitalocean_token=${{ secrets.DIGITALOCEAN_TOKEN }}" deployments/cloud-images.json

  docker-image-amd64:
    runs-on: ubuntu-latest
    needs: version-stamp
    steps:
    - uses: actions/checkout@v1
    - uses: actions/download-artifact@v1.0.0
      with: { name: version }
    - name: Build Docker image
      run: >
        VERSION=$(cat version/version);
        DOCKER_BUILDKIT=1 docker build . --tag "${IMAGEID}:${VERSION}-amd64" &&
        docker save "${IMAGEID}:${VERSION}-amd64" | gzip > image.tar.gz
    - uses: actions/upload-artifact@v1.0.0
      with: { name: docker-image-amd64, path: image.tar.gz }

  postprocess-and-trigger-deploy:
    runs-on: ubuntu-latest
    needs: [version-stamp, cloud-images, docker-image-amd64]
    steps:
      - uses: actions/download-artifact@v1.0.0
        with: { name: version }
      - uses: actions/download-artifact@v1.0.0
        with: { name: docker-image-amd64 }
      - name: Configure Docker client / login
        run: >
          mkdir -p ~/.docker &&
          echo '{"experimental":"enabled"}' > ~/.docker/config.json &&
          echo ${{ secrets.DOCKERHUB_TOKEN }} | docker login -u mejedi --password-stdin
      - name: Upload Docker images
        run: >
          VERSION=$(cat version/version);
          IID=${IMAGEID}:${VERSION};
          zcat docker-image-amd64/image.tar.gz | docker image load &&
          docker push "${IID}-amd64" &&
          docker manifest create "${IID}" "${IID}-amd64" &&
          docker manifest push "${IID}" &&
          if [ "${GITHUB_EVENT_NAME}" = create ]; then
            docker manifest create "${IMAGEID}:latest" "${IID}-amd64" &&
            docker manifest push "${IMAGEID}:latest"
          fi
      - name: Trigger deploy
        run: >
          if [ "${GITHUB_EVENT_NAME}" = push ]; then
            ENV=staging
            REF=${GITHUB_SHA}
          else
            ENV=production
            REF=${GITHUB_REF}
          fi;
          curl -sd "{\"ref\":\"${REF}\",\"required_contexts\":[],\"environment\":\"${ENV}\",\"payload\":{\"version\":\"$(cat version/version)\"}}" https://api.github.com/repos/${GITHUB_REPOSITORY}/deployments -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}"
